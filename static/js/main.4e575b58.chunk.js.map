{"version":3,"sources":["PlayPauseToggle.js","ResetButton.js","DecrementButton.js","IncrementButton.js","Label.js","Timer.js","Container.js","index.js"],"names":["PlayPauseToggle","react_default","a","createElement","className","onClick","this","props","status","index_esm","React","Component","ResetButton","reset","DecrementButton","disabled","decrement","title","IncrementButton","increment","Label","src_IncrementButton","isPaused","value","src_DecrementButton","timerStyle","color","fontSize","fontFamily","sessionTextStyle","Timer","id","style","class","timerType","minutes","seconds","Container","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","alarmSound","Audio","userInteractionCheck","setState","userInteraction","incrementItem","labelTitle","console","log","state","sessionLength","pause","prevState","sessionSecondsRemaining","displayMinutes","displaySeconds","breakLength","breakSecondsRemaining","decrementItem","sessionTimeValue","secondsToHms","breakTimeValue","sessionIntervalSetter","clearInterval","sessionCountDown","playAlarm","breakCountDown","setInterval","breakIntervalSetter","play","togglePause","resetClock","label","bind","assertThisInitialized","d","m","Math","floor","s","mDisplay","toString","sDisplay","src_Label","src_Timer","src_PlayPauseToggle","src_ResetButton","rootElement","document","getElementById","ReactDOM","render","src_Container"],"mappings":"iOAiBeA,mLAXX,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAA0BC,QAASC,KAAKC,MAAMC,QAC9DP,EAAAC,EAAAC,cAACM,EAAA,EAAD,MACAR,EAAAC,EAAAC,cAACM,EAAA,EAAD,eANoBC,IAAMC,WCWrBC,mLAVX,OACEX,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAqBC,QAASC,KAAKC,MAAMM,OACzDZ,EAAAC,EAAAC,cAACM,EAAA,EAAD,eALgBC,IAAMC,WCWjBG,MAVf,SAAyBP,GACvB,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBAAsBW,SAAUR,EAAMQ,SAAUV,QAAS,kBAAME,EAAMS,UAAUT,EAAMU,SACrGhB,EAAAC,EAAAC,cAACM,EAAA,EAAD,SCMOS,MAVf,SAAyBX,GACvB,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBAAsBW,SAAUR,EAAMQ,SAAUV,QAAS,kBAAME,EAAMY,UAAUZ,EAAMU,SACrGhB,EAAAC,EAAAC,cAACM,EAAA,EAAD,SCuBOW,MA3Bf,SAAeb,GACb,OACEN,EAAAC,EAAAC,cAAA,WAASC,UAAU,SACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAA+BG,EAAMU,MAAQ,WAC3DhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBACXH,EAAAC,EAAAC,cAACkB,EAAD,CACEF,UAAWZ,EAAMY,UACjBF,MAAOV,EAAMU,MACbF,UAA6B,IAAnBR,EAAMe,YAGpBrB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qCAAqCG,EAAMgB,OACxDtB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBACXH,EAAAC,EAAAC,cAACqB,EAAD,CACER,UAAWT,EAAMS,UACjBC,MAAOV,EAAMU,MACbF,UAA6B,IAAnBR,EAAMe,aAItBrB,EAAAC,EAAAC,cAAA,aCtBAsB,EAAY,CAChBC,MAAO,QACPC,SAAU,OACVC,WAAY,cAERC,EAAmB,CACvBH,MAAO,QACPE,WAAW,cAeEE,mLAVX,OACE7B,EAAAC,EAAAC,cAAA,WAAS4B,GAAG,YAAY3B,UAAU,eAEhCH,EAAAC,EAAAC,cAAA,MAAI6B,MAAOH,EAAkBI,MAAM,cAAcF,GAAG,eAAezB,KAAKC,MAAM2B,UAA9E,WACAjC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgB4B,MAAOP,GAApC,IAAkDnB,KAAKC,MAAM4B,QAA7D,IAAuE7B,KAAKC,MAAM6B,QAAlF,aANY1B,IAAMC,WC4RX0B,cA/Rb,SAAAA,EAAY9B,GAAO,IAAA+B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjC,KAAA+B,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjC,KAAAiC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArC,KAAMC,KAkBRqC,WAAa,IAAIC,MACf,6FApBiBP,EA8CjBQ,qBAAuB,WACnBR,EAAKS,SAAS,CAACC,iBAAiB,KA/CnBV,EAkDjBW,cAAgB,SAAAC,GAGZ,OAFAZ,EAAKQ,uBACLK,QAAQC,IAAId,EAAKQ,wBACTI,GACJ,IAAK,UACGZ,EAAKe,MAAMC,cAAgB,IAAMhB,EAAKe,MAAME,QAC5CjB,EAAKS,SAAS,SAAAS,GAAS,MAAK,CACxBF,cAAeE,EAAUF,cAAe,EACxCG,wBAAwD,IAA9BD,EAAUF,cAAgB,MAI5B,YAAzBhB,EAAKe,MAAMnB,WACVI,EAAKS,SAAS,SAAAS,GAAS,MAAK,CACxBE,eAAgBpB,EAAKe,MAAMC,cAAe,EAC1CK,eAAgB,SAI5B,MACJ,IAAK,QACGrB,EAAKe,MAAMO,YAAc,IAAMtB,EAAKe,MAAME,QAC1CjB,EAAKS,SAAS,SAAAS,GAAS,MAAK,CACxBI,YAAaJ,EAAUI,YAAc,EACrCC,sBAAoD,IAA5BL,EAAUI,YAAa,MAIvB,UAAzBtB,EAAKe,MAAMnB,WACVI,EAAKS,SAAS,SAAAS,GAAS,MAAK,CACxBE,eAAgBpB,EAAKe,MAAMO,YAAa,EACxCD,eAAgB,WAjFvBrB,EA0FjBwB,cAAgB,SAAAZ,GAIZ,OAFAZ,EAAKQ,uBACLK,QAAQC,IAAId,EAAKe,MAAML,iBACfE,GACJ,IAAK,UACGZ,EAAKe,MAAMC,cAAgB,GAAKhB,EAAKe,MAAME,QAC3CjB,EAAKS,SAAS,SAAAS,GAAS,MAAK,CACxBF,cAAeE,EAAUF,cAAgB,EACzCG,wBAAwD,IAA9BD,EAAUF,cAAgB,MAI5B,YAAzBhB,EAAKe,MAAMnB,WACVI,EAAKS,SAAS,SAAAS,GAAS,MAAK,CACxBE,eAAgBpB,EAAKe,MAAMC,cAAe,EAC1CK,eAAgB,SAI5B,MACJ,IAAK,QACGrB,EAAKe,MAAMO,YAAc,GAAKtB,EAAKe,MAAME,QACzCjB,EAAKS,SAAS,SAAAS,GAAS,MAAK,CACxBI,YAAaJ,EAAUI,YAAc,EACrCC,sBAAqD,IAA7BL,EAAUI,YAAc,MAIxB,UAAzBtB,EAAKe,MAAMnB,WACVI,EAAKS,SAAS,SAAAS,GAAS,MAAK,CACxBE,eAAgBpB,EAAKe,MAAMO,YAAa,EACxCD,eAAgB,WA1HvBrB,EAmInByB,iBAAmB,WASjBzB,EAAK0B,aAAa1B,EAAKe,MAAMI,yBAC7BnB,EAAKS,SAAS,CAEZU,wBAAyBnB,EAAKe,MAAMI,wBAA0B,KA/I/CnB,EAoJnB2B,eAAiB,WASf3B,EAAK0B,aAAa1B,EAAKe,MAAMQ,uBAC7BvB,EAAKS,SAAS,CAEZc,sBAAuBvB,EAAKe,MAAMQ,sBAAwB,KAhK3CvB,EA8KnB4B,sBAAwB,YACD,IAArB5B,EAAKe,MAAME,OAAmBjB,EAAKyB,mBACnCzB,EAAKS,SAAS,CACVb,UAAW,YAGiB,OAA9BI,EAAKe,MAAMK,gBACmB,OAA9BpB,EAAKe,MAAMM,iBAEXQ,cAAc7B,EAAK8B,kBACnBjB,QAAQC,IAAI,yBAA2Bd,EAAKe,MAAMI,wBAA0B,MAC5EnB,EAAKS,SAAS,CACVU,wBAAoD,GAA3BnB,EAAKe,MAAMC,gBAExCH,QAAQC,IAAI,wBAA0Bd,EAAKe,MAAMI,yBACjDnB,EAAK+B,YACL/B,EAAKgC,eAAiBC,YAAYjC,EAAKkC,oBAAqB,OA9L7ClC,EAmMnBkC,oBAAsB,YACC,IAArBlC,EAAKe,MAAME,OAAmBjB,EAAK2B,iBACnC3B,EAAKS,SAAS,CACVb,UAAW,UAGiB,OAA9BI,EAAKe,MAAMK,gBACmB,OAA9BpB,EAAKe,MAAMM,iBAEXQ,cAAc7B,EAAKgC,gBACnBhC,EAAKS,SAAS,CACZc,sBAAgD,GAAzBvB,EAAKe,MAAMO,cAEpCtB,EAAK+B,YACL/B,EAAK8B,iBAAmBG,YAAYjC,EAAK4B,sBAAuB,OAjNjD5B,EAsNnB+B,UAAY,WACV/B,EAAKM,WAAW6B,QAvNCnC,EA0NnBoC,YAAc,WAEZpC,EAAKS,SAAS,CACZQ,OAAQjB,EAAKe,MAAME,MACnBP,iBAAiB,KA9NFV,EAkOnBqC,WAAa,WACXrC,EAAKS,SAAS,CACZU,wBAAyB,KACzBH,cAAe,GACfO,sBAAuB,IACvBD,YAAa,KArOXtB,EAAKe,MAAQ,CACbI,wBAAyB,KACzBI,sBAAuB,IACvBP,cAAe,GACfM,YAAa,EACbD,eAAgB,KAChBD,eAAgB,GAEhBV,iBAAiB,EACjB4B,MAAO,UACPrB,OAAO,EACPrB,UAAW,WAIfI,EAAK0B,aAAe1B,EAAK0B,aAAaa,KAAlBtC,OAAAuC,EAAA,EAAAvC,CAAAD,IAjBHA,4EAuBNyC,GACX,IAAIC,EAAIC,KAAKC,MAAOH,EAAI,KAAQ,IAC5BI,EAAIF,KAAKC,MAAOH,EAAI,KAAQ,IAE5BK,EAAWJ,EAAI,GAAK,IAAMA,EAAEK,WAAaL,EAAEK,WAE3CC,EAAWH,EAAI,GAAK,IAAMA,EAAEE,WAAaF,EAAEE,WAW/C/E,KAAKyC,SAAS,SAAAS,GAAS,MAAK,CAC1BE,eAAgB0B,EAChBzB,eAAgB2B,iDA8HlBnC,QAAQC,IAAI9C,KAAK+C,MAAML,iBACvB1C,KAAKwC,uBACLxC,KAAK8D,iBAAmBG,YAAYjE,KAAK4D,sBAAuB,sCAsEhE,OACEjE,EAAAC,EAAAC,cAAA,OAAK4B,GAAG,YAAY3B,UAAU,aAU5BH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAd,oBAEJH,EAAAC,EAAAC,cAAA,OAAK8B,MAAM,eACPhC,EAAAC,EAAAC,cAACoF,EAAD,CAEAtE,MAAM,QACNc,GAAG,cACHR,MAAOjB,KAAK+C,MAAMO,YAClBzC,UAAWb,KAAK2C,cAChBjC,UAAWV,KAAKwD,cAChBxC,SAAUhB,KAAK+C,MAAME,QAErBtD,EAAAC,EAAAC,cAACoF,EAAD,CAEAtE,MAAM,UACNc,GAAG,gBACHR,MAAOjB,KAAK+C,MAAMC,cAClBnC,UAAWb,KAAK2C,cAChBjC,UAAWV,KAAKwD,cAChBxC,SAAUhB,KAAK+C,MAAME,SAGzBtD,EAAAC,EAAAC,cAACqF,EAAD,CACEzD,GAAG,YACHG,UAAW5B,KAAK+C,MAAMnB,UACtBC,QAAS7B,KAAK+C,MAAMK,eACpBtB,QAAS9B,KAAK+C,MAAMM,iBAGtB1D,EAAAC,EAAAC,cAACsF,EAAD,CAAkB1D,GAAG,aAAavB,OAAQF,KAAKoE,cAC/CzE,EAAAC,EAAAC,cAACuF,EAAD,CAAa3D,GAAG,QAAQlB,MAAOP,KAAKqE,qBA3RpBjE,IAAMC,WCC9B,IAAMgF,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO9F,EAAAC,EAAAC,cALhB,WACE,OAAOF,EAAAC,EAAAC,cAAC6F,EAAD,OAIO,MAASL","file":"static/js/main.4e575b58.chunk.js","sourcesContent":["import React from \"react\";\nimport { FiPlay } from \"react-icons/fi\";\nimport { FiPause } from \"react-icons/fi\";\n\nclass PlayPauseToggle extends React.Component {\n  render() {\n    return (\n      <section className=\"boxes four\">\n        <button className=\"common-color play-pause\" onClick={this.props.status}>\n          <FiPlay />\n          <FiPause />\n        </button>\n      </section>\n    );\n  }\n}\n\nexport default PlayPauseToggle;","import React from \"react\";\nimport { FiRefreshCcw } from \"react-icons/fi\";\n\nclass ResetButton extends React.Component {\n  render() {\n    return (\n      <section className=\"boxes five\">\n        <button className=\"common-color reset\" onClick={this.props.reset}>\n          <FiRefreshCcw />\n        </button>\n      </section>\n    );\n  }\n}\n\nexport default ResetButton;","import React from \"react\";\n\nimport { FiArrowDown } from \"react-icons/fi\";\n\nfunction DecrementButton(props) {\n  return (\n    <div>\n      <button className=\"common-color arrows\" disabled={props.disabled} onClick={() => props.decrement(props.title)}>\n        <FiArrowDown />\n      </button>\n    </div>\n  );\n}\n\nexport default DecrementButton;\n","import React from \"react\";\n\nimport { FiArrowUp } from \"react-icons/fi\";\n\nfunction IncrementButton(props) {\n  return (\n    <div>\n      <button className=\"common-color arrows\" disabled={props.disabled} onClick={() => props.increment(props.title)}>\n        <FiArrowUp />\n      </button>\n    </div>\n  );\n}\n\nexport default IncrementButton;","import React from \"react\";\nimport DecrementButton from \"./DecrementButton\";\nimport IncrementButton from \"./IncrementButton\";\n\nfunction Label(props) {\n  return (\n    <section className=\"boxes\">\n      <h2 className=\"common-color box lengthName\">{props.title + \" Length\"}</h2>\n      <div className=\"incDecContainer box\">\n        <p className=\"common-color arrow-ui\">\n          <IncrementButton\n            increment={props.increment}\n            title={props.title}\n            disabled={props.isPaused === true ? false : true}\n          />\n        </p>\n        <p className=\"common-color arrow-ui lengthValue\">{props.value}</p>\n        <p className=\"common-color arrow-ui\">\n          <DecrementButton\n            decrement={props.decrement}\n            title={props.title}\n            disabled={props.isPaused === true ? false : true}\n          />\n        </p>\n      </div>\n      <br />\n      \n    </section>\n  );\n}\n\nexport default Label;\n","import React from \"react\";\n\n\nconst timerStyle ={\n  color: \"black\",\n  fontSize: \"7rem\",\n  fontFamily: \"DS-Digital\",\n}\nconst sessionTextStyle = {\n  color: \"white\",\n  fontFamily:\"DS-Digital\",\n  \n}\nclass Timer extends React.Component {\n  render() {\n    return (\n      <section id=\"time-left\" className=\"boxes three\">\n        {/* Timer component (You send state down to me and I display it!) */}\n        <h3 style={sessionTextStyle} class=\"sessionText\" id=\"timer-label\">{this.props.timerType} Timer:</h3>\n        <p className=\"timer-display\" style={timerStyle}> {this.props.minutes}:{this.props.seconds} </p>\n      </section>\n    );\n  }\n}\n\nexport default Timer;","import React from \"react\";\n\nimport './styles.css'\nimport PlayPauseToggle from \"./PlayPauseToggle\";\nimport ResetButton from \"./ResetButton\";\nimport Label from \"./Label\";\nimport Timer from \"./Timer\";\n//import { FiClock } from \"react-icons/fi\";\n\nclass Container extends React.Component {\n  constructor(props) {\n    super(props);\n        this.state = {\n        sessionSecondsRemaining: 1500, //in raw seconds\n        breakSecondsRemaining: 300, //in raw seconds\n        sessionLength: 25, //in minutes\n        breakLength: 5, // in minutes\n        displaySeconds: \"00\",\n        displayMinutes: 25,\n        //playing: false,\n        userInteraction: false,\n        label: \"session\",\n        pause: true,\n        timerType: \"session\",\n        //this.sessionCountDown=this.sessionCountDown.bind(this);\n        \n    }\n    this.secondsToHms = this.secondsToHms.bind(this);\n}\n  alarmSound = new Audio(\n    \"https://res.cloudinary.com/dmkct6wfu/video/upload/v1557109540/pomodoroAppAssets/alarm.mp3\"\n  ); //js audio object that handles playing the alarm sound\n\n  secondsToHms(d) {\n    let m = Math.floor((d % 3600) / 60);\n    let s = Math.floor((d % 3600) % 60);\n\n    var mDisplay = m < 10 ? \"0\" + m.toString() : m.toString();\n\n    var sDisplay = s < 10 ? \"0\" + s.toString() : s.toString(); \n    /*\n        both vars sDisplay and mDisplay \n        start as numbers but are converted to string values.\n        The function converts raw numbers, and if the value\n        is less than 10 from either display variable, the function\n        will display a single digit value. A string \n        value of \"0\" is concatenated to the string converted numerical value to\n        pad the value out.\n    */ \n\n    this.setState(prevState => ({\n      displayMinutes: mDisplay, //sets state.displayMinutes value to mDisplay\n      displaySeconds: sDisplay //Sets state.displaySeconds value to sDisplay\n    }));\n  }\n\n    userInteractionCheck = () =>{\n        this.setState({userInteraction: true})\n    }\n\n    incrementItem = labelTitle => {\n        this.userInteractionCheck()\n        console.log(this.userInteractionCheck())\n        switch (labelTitle) {\n            case 'Session':\n                if (this.state.sessionLength < 60 && this.state.pause){\n                    this.setState(prevState => ({\n                        sessionLength: prevState.sessionLength +1,\n                        sessionSecondsRemaining: (prevState.sessionLength + 1) *60,\n                        //displayMinutes: this.state.sessionLength +1,\n                        //displaySeconds: \"00\",\n                    }));\n                    if(this.state.timerType === \"session\"){\n                        this.setState(prevState => ({\n                            displayMinutes: this.state.sessionLength +1,\n                            displaySeconds: \"00\",\n                        }))\n                    } \n                };\n                break;\n            case 'Break':\n                if (this.state.breakLength < 60 && this.state.pause){\n                    this.setState(prevState => ({\n                        breakLength: prevState.breakLength + 1,\n                        breakSecondsRemaining: (prevState.breakLength +1) * 60,\n                        // displayMinutes: this.state.breakLength +1,\n                        // displaySeconds: \"00\",\n                    }));\n                    if(this.state.timerType === \"break\"){\n                        this.setState(prevState => ({\n                            displayMinutes: this.state.breakLength +1,\n                            displaySeconds: \"00\",\n                        }))\n                    }  \n                } \n                break;\n            default: break;\n        }  \n    }\n\n    decrementItem = labelTitle => {\n        \n        this.userInteractionCheck()\n        console.log(this.state.userInteraction)\n        switch (labelTitle){\n            case 'Session':\n                if (this.state.sessionLength > 1 && this.state.pause){\n                    this.setState(prevState => ({\n                        sessionLength: prevState.sessionLength - 1,\n                        sessionSecondsRemaining: (prevState.sessionLength - 1) *60,\n                        //displayMinutes: this.state.sessionLength -1,\n                        //displaySeconds: \"00\",\n                    }));\n                    if(this.state.timerType === \"session\"){\n                        this.setState(prevState => ({\n                            displayMinutes: this.state.sessionLength -1,\n                            displaySeconds: \"00\",\n                        }))\n                    }\n                };\n                break;\n            case 'Break':\n                if (this.state.breakLength > 1 && this.state.pause) {\n                    this.setState(prevState => ({\n                        breakLength: prevState.breakLength - 1,\n                        breakSecondsRemaining: (prevState.breakLength - 1) * 60,\n                        // displayMinutes: this.state.sessionLength -1,\n                        // displaySeconds: \"00\",\n                    }));\n                    if(this.state.timerType === \"break\"){\n                        this.setState(prevState => ({\n                            displayMinutes: this.state.breakLength -1,\n                            displaySeconds: \"00\",\n                        }))\n                    }  \n                };\n                break;\n            default: break;\n        }\n    }\n\n  sessionTimeValue = () => {\n    /* TLDR: Determines the amount of \n        seconds left and converts that raw value into a \n        readable time for a work session and filters it \n        through secondsToHms function\n    */\n    // let readableSessionTime = this.secondsToHms(\n    //     this.state.sessionSecondsRemaining\n    // );\n    this.secondsToHms(this.state.sessionSecondsRemaining);\n    this.setState({\n      //sessionSecondsRemaining: this.state.sessionSecondsRemaining - 1,\n      sessionSecondsRemaining: this.state.sessionSecondsRemaining - 1,\n      //sessionTime: readableSessionTime - 1\n    });\n  };\n\n  breakTimeValue = () => {\n    /* TLDR: Determines the amount of \n        seconds left and converts that raw value into a \n        readable time for a break session and filters it \n        through secondsToHms function\n    */\n    // let readableBreakTime = this.secondsToHms(\n    //     this.state.breakSecondsRemaining\n    // );\n    this.secondsToHms(this.state.breakSecondsRemaining);\n    this.setState({\n      //breakSecondsRemaining: this.state.breakSecondsRemaining - 1,\n      breakSecondsRemaining: this.state.breakSecondsRemaining - 1,\n      //breakTime: readableBreakTime - 1\n    });\n  };\n  \n  //timers = (interval) => this.sessionCountDown(interval);\n\n  componentDidMount(){\n    console.log(this.state.userInteraction)\n    this.userInteractionCheck();\n    this.sessionCountDown = setInterval(this.sessionIntervalSetter, 1000);\n    \n  };\n\n  sessionIntervalSetter = () => {\n    this.state.pause === false && this.sessionTimeValue();\n    this.setState({\n        timerType: \"session\", \n    })\n    if (\n      this.state.displayMinutes === \"00\" &&\n      this.state.displaySeconds === \"00\"\n    ) {\n      clearInterval(this.sessionCountDown);\n      console.log(\"before setState runs: \" + this.state.sessionSecondsRemaining + \"\\n\")\n      this.setState({\n          sessionSecondsRemaining: this.state.sessionLength * 60,\n      })\n      console.log(\"after setState runs: \" + this.state.sessionSecondsRemaining )\n      this.playAlarm();\n      this.breakCountDown = setInterval(this.breakIntervalSetter, 250);\n      //this.breakCountDown(this.breakIntervalSetter);\n    }\n  };\n\n  breakIntervalSetter = () => {\n    this.state.pause === false && this.breakTimeValue();\n    this.setState({\n        timerType: \"break\", \n    })\n    if (\n      this.state.displayMinutes === \"00\" &&\n      this.state.displaySeconds === \"00\"\n    ) {\n      clearInterval(this.breakCountDown);\n      this.setState({\n        breakSecondsRemaining: this.state.breakLength * 60,\n      })\n      this.playAlarm();\n      this.sessionCountDown = setInterval(this.sessionIntervalSetter, 250);\n    }\n  };\n\n\n  playAlarm = () => {\n    this.alarmSound.play();\n  };\n\n  togglePause = () => {\n    \n    this.setState({\n      pause: !this.state.pause,\n      userInteraction: true\n    });\n  };\n\n  resetClock = () => {\n    this.setState({\n      sessionSecondsRemaining: 1500,\n      sessionLength: 25,\n      breakSecondsRemaining: 300,\n      breakLength: 5\n    });\n  };\n  //Further work needs to be done with the \n  //resetClock method so that the project can pass\n  //freeCodeCamp tests but I'm gonna call it a \n  //finished project today (6/15/19)\n    \n  render() {\n    return (\n      <div id=\"container\" className=\"container\">\n        {/* Session time raw seconds: {this.state.sessionSecondsRemaining}\n        <br />\n        Break time raw seconds: {this.state.breakSecondsRemaining}\n        <br />\n        Display time: {this.state.displayMinutes}:{this.state.displaySeconds}\n        <br />\n        Incremented/Decremented User Adjusted time: {this.state.sessionLength}\n        <br /> \n        TimerType: {this.state.timerType} */}\n        <header className=\"one boxes\">\n            <h1 className=\"common-color header\">Pomodoro Clock!</h1>\n        </header>\n        <div class=\"wrapper two\">\n            <Label\n            //className=\"break\"\n            title=\"Break\"\n            id=\"break-label\"\n            value={this.state.breakLength}\n            increment={this.incrementItem}\n            decrement={this.decrementItem}\n            isPaused={this.state.pause}\n            />\n            <Label\n            //className=\"session\"\n            title=\"Session\"\n            id=\"session-label\"\n            value={this.state.sessionLength}\n            increment={this.incrementItem}\n            decrement={this.decrementItem}\n            isPaused={this.state.pause}\n            />\n       </div>\n        <Timer \n          id=\"time-left\"\n          timerType={this.state.timerType}\n          minutes={this.state.displayMinutes }\n          seconds={this.state.displaySeconds}\n        />\n        \n        <PlayPauseToggle  id=\"start_stop\" status={this.togglePause} />\n        <ResetButton id=\"reset\" reset={this.resetClock} />\n      </div>\n    );\n  }\n}\nexport default Container;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Container from \"./Container\";\n\nimport \"./styles.css\";\n\nfunction App() {\n  return <Container />;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}